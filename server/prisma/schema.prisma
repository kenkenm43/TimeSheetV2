generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique @db.VarChar(255)
  firstName    String
  lastName     String
  idCard       String   @unique
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  resetToken   String   @default("")
  refreshToken String   @default("")
  role         Role     @relation(fields: [roleId], references: [id])
  roleId       Int      @default(1)
  profile      Profile?
}

model Profile {
  id         String   @id @default(uuid())
  startedAt  DateTime @default(now())
  salary     Int      @default(0)
  saving     Int      @default(0)
  transcript String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
}

model Role {
  id            Int             @id @default(autoincrement())
  name          String
  users         User[]
  System_Access System_Access[]
}

model Employee {
  id                 String              @id @default(uuid())
  firstName          String
  lastName           String
  idCard             String?             @unique
  gender             String?
  date_of_birth      DateTime?
  address            String?
  phone_number       String?             @unique
  email              String?             @unique
  photo              String?
  job_title          String?
  education_level    String?
  experience         String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  Employment_Details Employment_Details?
  Financial_Details  Financial_Details?
  System_Access      System_Access?
  Performance        Performance?
  Leave              Leave[]
  WorkSchedule       WorkSchedule[]
}

model Employment_Details {
  id                   String    @id @default(uuid())
  position             String?
  department           String?
  contract_type        String?
  start_date           DateTime?
  end_date             DateTime?
  pro_pass             DateTime?
  salary               Int?
  salary_increase      String?
  salary_decrease      String?
  tax_information      String?
  work_per_day         Decimal?
  allocated_leave_days Bytes?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  employee             Employee  @relation(fields: [employeeId], references: [id])
  employeeId           String    @unique
  Expense              Expense[]
}

model WorkSchedule {
  id           String    @id @default(uuid())
  work_start   DateTime?
  work_end     DateTime?
  work_status  String?
  work_ot      Boolean?  @default(false)
  work_perdium Boolean?  @default(false)
  employee     Employee  @relation(fields: [employeeId], references: [id])
  employeeId   String
}

model Leave {
  id           String   @id @default(uuid())
  leave_type   String?
  leave_date            @db.DateTime(7)?
  leave_reason String?
  leave_cause  String?
  employee     Employee @relation(fields: [employeeId], references: [id])
  employeeId   String
}

model Expense {
  id                   String              @id @default(uuid())
  expense_date         DateTime?
  expense_description  String?
  expense_amount       Decimal?
  Employment_Details   Employment_Details? @relation(fields: [employment_DetailsId], references: [id])
  employment_DetailsId String?
}

model Performance {
  id                 String   @id @default(uuid())
  performance_rating String?
  feedback           String?
  employee           Employee @relation(fields: [employeeId], references: [id])
  employeeId         String   @unique
}

model Financial_Details {
  id                     String   @id @default(uuid())
  bank_account_number    String?
  bank_name              String?
  social_security_number String?
  health_insurance       String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  employee               Employee @relation(fields: [employeeId], references: [id])
  employeeId             String   @unique
}

model System_Access {
  access_id     String   @id @default(uuid())
  username      String
  password      String
  refreshToken  String?
  access_rights String?
  role          Role     @relation(fields: [roleId], references: [id])
  roleId        Int      @default(1)
  employee      Employee @relation(fields: [employeeId], references: [id])
  employeeId    String   @unique
}
